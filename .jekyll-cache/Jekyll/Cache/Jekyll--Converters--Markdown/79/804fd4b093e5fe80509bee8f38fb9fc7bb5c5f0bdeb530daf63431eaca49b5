I"∑<h2 id="question">Question</h2>

<p>Consider the fraction, \(n/d\), where \(n\) and \(d\) are positive integers. If \(n&lt;d\) and \(HCF(n,d)=1\), it is called a reduced proper fraction.</p>

<p>If we list the set of reduced proper fractions for \(d\leq 8\) in ascending order of size, we get:</p>

\[\frac{1}{8},\frac{1}{7},\frac{1}{6},\frac{1}{5},\frac{1}{4},\frac{2}{7},\frac{1}{3},\mathbf{\frac{3}{8}},\mathbf{\frac{2}{5}}, \mathbf{\frac{3}{7}},\frac{1}{2},\frac{4}{7},\frac{3}{5},\frac{5}{8},\frac{2}{3},\frac{5}{7},\frac{3}{4},\frac{4}{5},\frac{5}{6},\frac{6}{7},\frac{7}{8}\]

<p>It can be seen that there are 3 fractions between \(1/3\) and \(1/2\).</p>

<p>How many fractions lie between \(1/3\) and \(1/2\) in the sorted set of reduced proper fractions for \(d\leq12000\)?</p>

<h2 id="answer">Answer</h2>

<p>Seeing as it‚Äôs the third question in a row after Problems <a href="/ProjectEuler/ProjectEuler/Problem-71-Ordered-fractions/">71</a> and <a href="/ProjectEuler/ProjectEuler/Problem-72-Counting-fractions/">72</a>, I decided to research to see if this ‚Äúset of reduced proper fractions‚Äù had a name. To my delight, this set is actually called a <strong>Farey sequence</strong>, and of course, there is a Wikipedia article on it. More importantly, the article also shows how to generate the fractions <strong>in order</strong> given two consecutive fractions in the sequence.</p>

<p>Paraphrasing from the article, if we have two consecutive fractions \(a/b\) and \(c/d\), then the next fraction in the sequence is  \(p/q\) where</p>

\[\begin{aligned}
	p &amp;= \lfloor \frac{n + b}{d} \rfloor c - a
	\\
	q &amp;= \lfloor \frac{n + b}{d} \rfloor d - b
\end{aligned}\]

<p>Now, we have one of the fractions we start from, namely \(1/3\), but we need the fraction immediately to its left in order to start the sequence. But we‚Äôve done that before in <a href="/ProjectEuler/ProjectEuler/Problem-71-Ordered-fractions/">Problem 71</a>! So, all we need to do slightly adapt it, and then continue generating the next fraction until we hit \(1/2\).</p>

<p>I‚Äôve created a general function following #71‚Äôs logic to find the fraction immediately to the left of \(a/b\), given the maximum denominator.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">findClosestFraction</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">minDist</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">'inf'</span><span class="p">)</span>
    <span class="n">bestNum</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">bestDenom</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">denom</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="c1"># Skip multiples of b
</span>        <span class="k">if</span> <span class="n">denom</span> <span class="o">%</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="c1"># Calculate closest
</span>        <span class="n">num</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">denom</span> <span class="o">//</span> <span class="n">b</span>
        <span class="n">dist</span> <span class="o">=</span> <span class="n">a</span><span class="o">/</span><span class="n">b</span> <span class="o">-</span> <span class="n">num</span><span class="o">/</span><span class="n">denom</span>
        <span class="k">if</span> <span class="n">dist</span> <span class="o">&lt;</span> <span class="n">minDist</span><span class="p">:</span>
            <span class="n">minDist</span> <span class="o">=</span> <span class="n">dist</span>
            <span class="n">bestNum</span> <span class="o">=</span> <span class="n">num</span>
            <span class="n">bestDenom</span> <span class="o">=</span> <span class="n">denom</span>
    <span class="k">return</span> <span class="n">bestNum</span><span class="p">,</span> <span class="n">bestDenom</span>
</code></pre></div></div>

<p>Now it‚Äôs just a matter of simple while loop. Since we are not including \(1/2\) from the list, we subtract one from our count.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="mi">12000</span>
<span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">findClosestFraction</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">c</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span>
<span class="k">while</span> <span class="n">c</span><span class="o">/</span><span class="n">d</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">2</span><span class="p">:</span>
    <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> <span class="o">//</span> <span class="n">d</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">k</span> <span class="o">*</span> <span class="n">c</span> <span class="o">-</span> <span class="n">a</span><span class="p">,</span> <span class="n">k</span> <span class="o">*</span> <span class="n">d</span> <span class="o">-</span> <span class="n">b</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">print</span><span class="p">(</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>Running the above results in,</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7295372
5.6877309 seconds.
</code></pre></div></div>

<p>Thus, when \(d=12000\), we have <strong>7295372</strong> fractions between \(1/3\) and \(1/2\). The time is not terrible, but there could be additional ways to count the fractions without actually calculating the fractions themselves.</p>
:ET