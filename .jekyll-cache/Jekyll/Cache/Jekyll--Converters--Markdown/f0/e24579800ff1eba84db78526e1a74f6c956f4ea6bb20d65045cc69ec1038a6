I"o<h2 id="question">Question</h2>

<p>In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:</p>

<p align="center">
1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), £2 (200p) 
</p>

<p>It is possible to make £2 in the following way:</p>

<p align="center">
1x£1 + 1x50p + 2x20p + 1x5p + 1x2p + 3x1p 
</p>

<p>How many different ways can £2 be made using any number of coins?</p>

<h2 id="answer">Answer</h2>

<p>This is very similar to finding partitions of a number. However, instead of the set of natural numbers at our disposal, we have the coin values above. To solve this, we note that in a certain set of coin values, we can either use a certain coin or not use it.</p>

<p>For example, with £2 given above, we can use £2 coin or not. If we use it, then that is obviously one way to make the value. If we don’t, our next option is to use the £1 coin. At that point, the problem turns into one of how many ways we can create £2 - £1 = £1 using the coins. In this way, we can recurse down, where each step we either choose the largest value available to us, or not use it. The base case will be when we have exactly £0 left. In this case, we have found a way to make change. Some of the special cases we have to take care of is when we have a negative amount, or when we have no more coins left to choose. Below is the function used to calculate the number of ways.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">makeChange</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">coins</span><span class="p">):</span>
    <span class="c1"># Coins will be in decreasing order i.e.
</span>    <span class="c1"># largest is first
</span>    <span class="c1"># Can't make change
</span>    <span class="k">if</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="c1"># I can make no change by choosing nothing
</span>    <span class="k">elif</span> <span class="n">value</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>
    <span class="c1"># I can't make something out of nothing
</span>    <span class="k">elif</span> <span class="n">value</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">coins</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="c1"># Recursive call: Have a case where I choose the largest
</span>    <span class="c1"># coin while decrementing value and a case where I skip it
</span>    <span class="c1"># and don't decrement value
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">makeChange</span><span class="p">(</span><span class="n">value</span> <span class="o">-</span> <span class="n">coins</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">coins</span><span class="p">)</span> <span class="o">+</span> <span class="n">makeChange</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">coins</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">coins</span><span class="p">)])</span>
</code></pre></div></div>

<p>After this, we can simply make the array of coin values, and call our function:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">coins</span> <span class="o">=</span> <span class="p">[</span><span class="mi">200</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">makeChange</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="n">coins</span><span class="p">))</span>
</code></pre></div></div>

<p>Running the code above results in an output of,</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>73682
1.9159925933914943 seconds.
</code></pre></div></div>

<p>Thus, there are <strong>73682</strong> ways to make £2 from the coins given.</p>
:ET