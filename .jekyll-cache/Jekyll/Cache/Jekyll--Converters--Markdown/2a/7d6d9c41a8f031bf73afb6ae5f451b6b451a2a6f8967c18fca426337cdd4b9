I"-<h2 id="question">Question</h2>

<p>It is well known that if the square root of a natural number is not an integer, then it is irrational. The decimal expansion of such square roots is infinite without any repeating pattern at all.</p>

<p>The square root of two is 1.41421356237309504880â€¦, and the digital sum of the first one hundred decimal digits is 475.</p>

<p>For the first one hundred natural numbers, find the total of the digital sums of the first one hundred decimal digits for all the irrational square roots.</p>

<h2 id="answer">Answer</h2>

<p>If there was a way to increase the precision of floating point numbers in Python, this would be a cinch. In the built-in <code class="highlighter-rouge">decimal</code> package, there is a variable called <code class="highlighter-rouge">getcontext().prec</code>. This is where we set how many <strong>total</strong> digits we want. Since we are going up to 100, 105 total digits is a safe bet. After that, it is simply a matter of converting each number to a string, finding the decimal point, then summing the first 100 digits after it.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">decimal</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1"># square root of 100 is 10 so set precision to 105
# to cover at least 100 decimal digits
</span><span class="n">getcontext</span><span class="p">().</span><span class="n">prec</span> <span class="o">=</span> <span class="mi">105</span>
<span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">**</span> <span class="mf">0.5</span> <span class="o">!=</span> <span class="nb">int</span><span class="p">(</span><span class="n">n</span> <span class="o">**</span> <span class="mf">0.5</span><span class="p">):</span>
        <span class="n">sqrt</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">Decimal</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">))</span> <span class="o">**</span> <span class="n">Decimal</span><span class="p">(</span><span class="s">'0.5'</span><span class="p">))</span>
        <span class="n">sqrt</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">'.'</span><span class="p">,</span> <span class="s">''</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="k">for</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">sqrt</span><span class="p">[:</span><span class="mi">100</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>

<p>Running the short loop above gets us an output of,</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>40886
0.05162940000000038 seconds.
</code></pre></div></div>

<p>Thus, our desired sum is <strong>40886</strong>.</p>
:ET