I"ù<h2 id="question">Question</h2>

<p>By counting carefully it can be seen that a rectangular grid measuring 3 by 2 contains eighteen rectangles:</p>

<p><img src="http://localhost:4000/ProjectEuler/assets/Images/p085.png" alt="rectImage" /></p>

<p>Although there exists no rectangular grid that contains exactly two million rectangles, find the area of the grid with the nearest solution.</p>

<h2 id="answer">Answer</h2>

<p>First, notice how the problem shows counting the rectangles. We are taking each possible size of the ‚Äúsub-rectangles‚Äù, and counting how many there are. In this case, a 2 x 1 rectangle is <strong>different</strong> from a 1 x 2 rectangle.</p>

<p>Given a grid size \(m\times n\), can we calculate how many rectangles there are? Let‚Äôs go through the same method that the problem goes through. For each possible ‚Äúsub-rectangle‚Äù dimension \(i\times j\), we‚Äôll count how many of these \(i\times j\) rectangles are contained in the larger \(m\times n\) grid.</p>

<p>Let‚Äôs say \(i\times j = 2\times 1\). Length-wise, we can fit 2 of these rectangles lengthwise above. Why? Because we‚Äôll run out of room. The 2 by 1 has 2 squares. At the right-most position of this 2 by 1, the left square is one away edge. In general, in an \(m\times n\) grid, we can fit \(m-i+1\) rectangles <strong>lengthwise</strong>. The \(m-i\) is how many rectangles before we run out of room, and the extra 1 is to count that last position. By the same logic, we can fit \(n-j+1\) rectangles <strong>width-wise</strong>. So obviously, for a specific \(i\times j\) ‚Äúsub-rectangle‚Äù, there are \((m-i+1)(n-j+1)\) of them in an \(m\times n\) grid. Summing over all possible values of \(i\) and \(j\) will give us the total number of rectangles in an \(m\times n\) grid.</p>

<p>If \(R(m,n)\) is the number of rectangles, then</p>

\[R(m,n) = \sum_{i=1}^m\sum_{j=1}^n (m-i+1)(n-j+1)\]

<p>Currently, if we were translate this into code, it would be double for loop. Can we simplify the expression so that we can calculate it directly? <strong>Yes!</strong> In a double summation, if we can write argument as a product of two terms, where one is a function of \(i\), and the other is a function of \(j\), then we can turn the sums of products into a product of sums! In other words, after a little algebra:</p>

\[\begin{aligned}
	R(m,n) &amp;= \sum_{i=1}^m\sum_{j=1}^n(m-i+1)(n-j+1)
	\\ &amp;=
	\left(\sum_{i=1}^m (m-i+1)\right)
		\left(\sum_{j=1}^n (n-j+1)\right)
	\\ &amp;=
	\left(\sum_{i=1}^m(m+1) - \sum_{i=1}^m i\right)
		\left(\sum_{j=1}^n(n+1) - \sum_{j=1}^n j\right)
	\\ &amp;=
	\left(m(m+1) - \frac{m(m+1)}{2}\right)
		\left(n(n+1) - \frac{n(n+1)}{2}\right)
	\\ &amp;=
	\left(\frac{m(m+1)}{2}\right)\left(\frac{n(n+1)}{2}\right)
	\\ &amp;=
	\boxed{\frac{mn(m+1)(n+1)}{4}}
\end{aligned}\]

<p>Great! We have directly formula for the number of rectangles in a grid. Notice that this is quadratic in \(m\) and \(n\). So this is going to pretty quickly. I simply did a guess on what max value to test until, and I guessed 100. So we‚Äôll have \(m\) going from 1 to 100, and \(n\) going from 1 to \(m\), since we don‚Äôt want to double test to grids of the same dimension.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">math</span>
<span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">perf_counter</span><span class="p">()</span>

<span class="c1"># Only have to go up to length-1 because
# 3 x 2 = 2 x 3
</span><span class="n">minDist</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">'inf'</span><span class="p">)</span>
<span class="n">target</span> <span class="o">=</span> <span class="mi">2000000</span>
<span class="n">area</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">bestM</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">bestN</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">101</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">rects</span> <span class="o">=</span> <span class="n">m</span> <span class="o">*</span> <span class="n">n</span> <span class="o">*</span> <span class="p">(</span><span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">4</span>
        <span class="k">if</span> <span class="n">math</span><span class="p">.</span><span class="n">fabs</span><span class="p">(</span><span class="n">rects</span> <span class="o">-</span> <span class="n">target</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">minDist</span><span class="p">:</span>
            <span class="n">minDist</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">fabs</span><span class="p">(</span><span class="n">rects</span> <span class="o">-</span> <span class="n">target</span><span class="p">)</span>
            <span class="n">area</span> <span class="o">=</span> <span class="n">m</span> <span class="o">*</span> <span class="n">n</span>
            <span class="n">bestM</span> <span class="o">=</span> <span class="n">m</span>
            <span class="n">bestN</span> <span class="o">=</span> <span class="n">n</span>
<span class="n">rects</span> <span class="o">=</span> <span class="n">bestM</span> <span class="o">*</span> <span class="n">bestN</span> <span class="o">*</span> <span class="p">(</span><span class="n">bestM</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">bestN</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">4</span>
<span class="k">print</span><span class="p">(</span><span class="s">'The grid is {} x {} (Area = {}) with {} rectangles.'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">bestM</span><span class="p">,</span> <span class="n">bestN</span><span class="p">,</span> <span class="n">area</span><span class="p">,</span> <span class="n">rects</span><span class="p">))</span>
</code></pre></div></div>

<p>Running this code, we get an output of,</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The grid is 77 x 36 (Area = 2772) with 1999998 rectangles.
0.0024605999999999795 seconds.
</code></pre></div></div>

<p>Thus, a \(77\times 36\) grid has the closest to 2 million rectangles, and its area is <strong>2772</strong>.</p>
:ET