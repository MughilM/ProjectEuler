I"b<h2 id="question">Question</h2>

<p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</p>

<p>What is the 10,001st prime number?</p>

<h2 id="answer">Answer</h2>

<p>Now, some of the previous problems I’ve used a package called <code class="highlighter-rouge">primesieve</code>, which would make solving this problem extremely trivial. However, that is not in the spirit of the problem, and so I will use another method to find it.</p>

<p>It has been shown that given a number \(n\), which can be either prime or composite, one only needs to check integers up until the \(\sqrt{n}\) to see if the number is prime. Because the bound is relatively small, we can get away with this starting point. The function <code class="highlighter-rouge">isPrime</code> will take a number and return <code class="highlighter-rouge">True</code> and <code class="highlighter-rouge">False</code> depending on if the number is prime or not. If the number is even then it does not bother checking all integers, and returns <code class="highlighter-rouge">True</code> immediately. Otherwise, it starts from 3, and checks all odd numbers up until \(\sqrt{n}\).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">isPrime</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">elif</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="k">while</span> <span class="n">count</span> <span class="o">**</span> <span class="mi">2</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">2</span>
    <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

<p>Now we just have to iterate starting from 3, and keep track of the number of primes we’ve encountered.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numOfPrimes</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">num</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">while</span> <span class="n">numOfPrimes</span> <span class="o">&lt;</span> <span class="mi">10001</span><span class="p">:</span>
    <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">+</span> <span class="mi">2</span>
    <span class="k">if</span> <span class="n">isPrime</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
        <span class="n">numOfPrimes</span> <span class="o">=</span> <span class="n">numOfPrimes</span> <span class="o">+</span> <span class="mi">1</span>
<span class="k">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</code></pre></div></div>

<p>Running the above code results in an output of:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>104743
0.6904462222222222 seconds.
</code></pre></div></div>

<p>The timing might seem a bit slow, but for the purposes of this problem, it is satisfactory. Future problems might require us to do something much more clever, especially if finding prime numbers is only a step in the problem, rather than the problem itself.</p>
:ET