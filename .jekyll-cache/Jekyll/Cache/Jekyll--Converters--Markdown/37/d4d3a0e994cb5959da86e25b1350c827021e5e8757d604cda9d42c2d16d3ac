I"(<h2 id="question">Question</h2>

<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>

<p align="center">
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89
</p>

<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>

<h2 id="answer">Answer</h2>

<p>Like before, we can go through the Fibonacci numbers, generating them and checking them as we go.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">s</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">b</span> <span class="o">&lt;=</span> <span class="mi">4000000</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">b</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="n">b</span>
    <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">temp</span>
<span class="k">print</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>

<p>Running this results in an output of,</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4613732
0.00011090000000002487 seconds.
</code></pre></div></div>

<h3 id="bonus">Bonus</h3>

<p>However, we can also solve this analytically. Notice the Fibonacci sequence above with an extra 1 at the beginning. If we assume \(F_1\) and \(F_2\) correspond to the first two ones, then it turns out that every 3rd Fibonacci number is even. Why? The number 1 is odd, Now, an odd integer plus another odd integer is an <strong>even</strong> integer. However, an odd integer plus an even integer gives an <strong>odd</strong> integer. There are no instances where we have two even integers, because it starts with two odd numbers. Therefore, we need to add every 3rd Fibonacci number. Recall that there is also a closed-form formula utilizing the golden ratio: \(F_n = \frac{\Phi^n - (1-\Phi)^{n}}{\sqrt{5}}\). Now we need to find the index of the largest Fibonacci number less than 4 million. From the <a href="https://en.wikipedia.org/wiki/Fibonacci_number#Computation_by_rounding">Wikipedia article</a>, the formula to find the closest index (rounded down) of a Fibonacci number is</p>

<p>[n(F) = \lfloor\log_\Phi\left(F\sqrt(5) + \frac{1}{2}\right)\rfloor
<br />
n(4000000) = 33]</p>

<p>Recall that the sum of a finite geometric series is \(a_1\frac{1-r^n}{1-r}\) where \(a_1\) is the first term, \(r\) is the common ratio, and \(n\) is the number of terms of the sequence. Now we can write our summation like so:</p>

<p>[\begin{aligned}
	S &amp;= \sum_{k=1}^{11}F_{3k}
	\ &amp;=
	\sum_{k=1}^{11}\frac{\Phi^{3k} - (1-\Phi)^{3k}}{\sqrt{5}}
	\ &amp;=
	\frac{1}{\sqrt{5}}\left(\sum_{k=1}^{11}\Phi^{3k} - \sum_{k=1}^{11}(1-\Phi)^{3k}\right)
	\ &amp;=
	\frac{1}{\sqrt{5}}\left(\Phi^3\frac{1-(\Phi^3)^{11}}{1-\Phi^3} - 
		(1-\Phi)^3\frac{1-((1-\Phi)^3)^{11}}{1-(1-\Phi)^3}\right)
	\ &amp;=
	\boxed{4613732}
\end{aligned}]</p>
:ET