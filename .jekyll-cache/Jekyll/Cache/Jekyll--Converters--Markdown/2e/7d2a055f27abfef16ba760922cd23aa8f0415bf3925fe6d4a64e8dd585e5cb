I"π <h2 id="question">Question</h2>

<p>Euler‚Äôs Totient function, \(\phi(n)\) [sometimes called the phi function], is used to determine the number of positive numbers less than or equal to \(n\) which are relatively prime to \(n\). For example, as 1, 2, 4, 5, 7, and 8, are all less than nine and relatively prime to nine, \(\phi(9)=6\). The number 1 is considered to be relatively prime to every positive number, so \(\phi(1)=1\).</p>

<p>Interestingly, \(\phi(87109)=79180\), and it can be seen that \(87109\) is a permutation of \(79180\).</p>

<p>Find the value of \(n, 1&lt;n&lt;10^7\), for which \(\phi(n)\) is a permutation of \(n\) and the ratio \(n/\phi(n)\) produces a minimum.</p>

<h2 id="answer">Answer</h2>

<p>There are a couple of changes from <a href="/ProjectEuler/ProjectEuler/Problem-69-Totient-maximum/">Problem 69</a>. First, we are looking for the <strong>minimum</strong> ratio as opposed to the maximum ratio. Secondly, our upper bound has increased from 1 million to 10 million. That means, if we were to try to run the same program to calculate \(\phi(n)\) from the problem 69, it would increase by a good amount. Thus, we‚Äôll have to be smarter about this search.</p>

<p>First, if \(n/\phi(n)\) needs to be minimized, then \(\phi(n)\) needs to be maximized. The totient function is directly related by the distinct prime factors of \(n\) through</p>

<table>
  <tbody>
    <tr>
      <td>[\phi(n) = n\prod_{p</td>
      <td>n}\left(1-\frac{1}{p}\right)]</td>
    </tr>
  </tbody>
</table>

<p>Notice that \(\left(1-\frac{1}{p}\right)\) is something less than 1. Thus, the <strong>more</strong> prime factors we have, the <strong>smaller</strong> \(\phi(n)\) will be. Best-case scenario, \(n\) is prime. In that case, \(\phi(n) = n-1\). However, \(n-1\) will never be a permutation of \(n\), and so we‚Äôll have to throw out this case. The next case is when \(n\) has 2 prime factors. If \(n=p_1p_2\), then</p>

<p>[\begin{aligned}
	\phi(n)&amp;=p_1p_2\left(1-\frac{1}{p_1}\right)\left(1-\frac{1}{p_2}\right)
	\ &amp;=
	p_1p_2\left(\frac{p_1-1}{p_1}\right)\left(\frac{p_2-1}{p_2}\right)
	\ &amp;=
	(p_1-1)(p_2-1)
\end{aligned}]</p>

<p>So now, we have a good method of quickly calculating \(\phi(n)\) (using only integers) given the two prime factors. Now, we want to keep this value as close to our upper bound of \(10^7\) as possible, so it makes sense to choose prime numbers close to \(\sqrt{10^7}\approx 3162.278\). The best thing we can do in this situation is to choose a ‚Äúradius‚Äù of prime numbers around this value to check. Of all the products whose totient function value and number are permutations of each other and less than \(10^7\), we can choose the one with the smallest ratio. I‚Äôll be using <code class="highlighter-rouge">primesieve</code> to generate the primes in the specified range.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">limit</span> <span class="o">=</span> <span class="mi">10</span> <span class="o">**</span> <span class="mi">7</span>
<span class="n">center</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">limit</span> <span class="o">**</span> <span class="mf">0.5</span><span class="p">)</span>
<span class="n">primes</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">primesieve</span><span class="p">.</span><span class="n">primes</span><span class="p">(</span><span class="n">center</span> <span class="o">-</span> <span class="mi">2000</span><span class="p">,</span> <span class="n">center</span> <span class="o">+</span> <span class="mi">2000</span><span class="p">))</span>
<span class="c1"># Keep a valid list of permutations...
</span><span class="n">totientPermutations</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">centerLoc</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">searchsorted</span><span class="p">(</span><span class="n">primes</span><span class="p">,</span> <span class="n">center</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">centerLoc</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">primes</span><span class="p">)):</span>
    <span class="c1"># Find location of largest factor which will
</span>    <span class="c1"># not result in a product over limit. It's right-
</span>    <span class="c1"># justified, so subtract 1
</span>    <span class="n">largestFactor</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">searchsorted</span><span class="p">(</span><span class="n">primes</span><span class="p">,</span> <span class="n">limit</span> <span class="o">//</span> <span class="n">primes</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="c1"># Going backwards, calculate phi(n), and n, and append
</span>    <span class="c1"># to our list of n is a permutation of phi(n)
</span>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">largestFactor</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="c1"># Phi(n) = (p1 - 1)(p2 - 1)
</span>        <span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">primes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">primes</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">primes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">primes</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">))</span> <span class="o">==</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">phi</span><span class="p">)):</span>
            <span class="n">totientPermutations</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">n</span><span class="p">,</span> <span class="n">phi</span><span class="p">])</span>

<span class="c1"># Convert to numpy array, take ratios,
# and find the one with the smallest.
</span><span class="n">totientPermutations</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">totientPermutations</span><span class="p">)</span>
<span class="n">ratios</span> <span class="o">=</span> <span class="n">totientPermutations</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="n">totientPermutations</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">totientPermutations</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">argmin</span><span class="p">(</span><span class="n">ratios</span><span class="p">)])</span>
</code></pre></div></div>

<p>The output of this code is,</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[8319823 8313928]
0.19818319999999995 seconds.
</code></pre></div></div>

<p>Thus, \(n=\boxed{8\,319\,823}\) will give us the minimum ratio. Note that \(\phi(n)=8\,313\,928\) is a permutation of \(n\) as well.</p>
:ET