I"ð!<h2 id="question">Question</h2>

<p>The sequence of triangle numbers is generated by adding the natural numbers. So the 7<sup>th</sup> triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:</p>

<p align="center">1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</p>
<p>Let us list the factors of the first seven triangle numbers:</p>

<ul>
  <li><strong>1</strong>: 1</li>
  <li><strong>3</strong>: 1, 3</li>
  <li><strong>6</strong>: 1, 2, 3, 6</li>
  <li><strong>10</strong>: 1, 2, 5, 10</li>
  <li><strong>15</strong>: 1, 3, 5, 15</li>
  <li><strong>21</strong>: 1, 3, 7, 21</li>
  <li><strong>28</strong>: 1, 2, 4, 7, 14, 28</li>
</ul>

<p>We can see that 28 is the first triangular number to have over five divisors.</p>

<p>What is the value of the first triangle number to have over five hundred divisors?</p>

<h2 id="answer">Answer</h2>

<p>A basic solution is test every triangle number, using the formula above, and find its factors by testing every number up to it. However, there are a couple of optimizations we can make. First, we note that the \(n^{th}\) triangular number \(T_n = \sum_{i=1}^n i = \frac{n(n+1)}{2}\). So that is one loop that disappears almost immediately. Additionally, for finding factors, we only have to test numbers up until \(\sqrt{T_n}\), since we can add pairs of factors. If \(T_n\) turns out to be a square number, however, then we need to add the extra factor. In code, this is:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">factors</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="n">facts</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">n</span> <span class="o">**</span> <span class="mf">0.5</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">facts</span><span class="p">.</span><span class="n">extend</span><span class="p">([</span><span class="n">i</span><span class="p">,</span> <span class="n">n</span> <span class="o">//</span> <span class="n">i</span><span class="p">])</span>
    <span class="c1"># See if the number is a perfect square
</span>    <span class="k">if</span> <span class="n">n</span> <span class="o">**</span> <span class="mf">0.5</span> <span class="o">==</span> <span class="nb">int</span><span class="p">(</span><span class="n">n</span> <span class="o">**</span> <span class="mf">0.5</span><span class="p">):</span>
        <span class="n">facts</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">n</span> <span class="o">**</span> <span class="mf">0.5</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">facts</span>

<span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">num</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">f</span> <span class="o">=</span> <span class="n">factors</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">500</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
        <span class="k">break</span>
    <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<p>Running the code gives us,</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>76576500
3.971642074074074 seconds.
</code></pre></div></div>

<p>Thus, <strong>76576500</strong> is our answer. However, the program is slightly slow, evidenced by the time taken. Can we make this faster? Well, notice that the problem says we have to find the <em>number</em> of divisors, not the divisors themselves. In fact, if we have the prime factorization of a number, then it is extremely simple to find the number of divisors of the number.</p>

<p>For example, \(48 = 2^4\times 3\). We take each exponent, add one to it, and multiply them together to get the number of divisors of 48. In this case, the number of divisors should be \((4+1)(1+1) = 5(2) = 10\). And indeed, the 10 divisors of 48 are 1, 2, 3, 4, 6, 8, 12, 16, 24, 48. Using <code class="highlighter-rouge">primesieve</code> we can grab the primes which divide into each number, and calculate the number of divisors as just described. The code now is,</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">numOfFactors</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="c1"># Get prime numbers less
</span>    <span class="c1"># than square root of n
</span>    <span class="n">primes</span> <span class="o">=</span> <span class="n">primesieve</span><span class="p">.</span><span class="n">primes</span><span class="p">(</span><span class="n">n</span> <span class="o">**</span> <span class="mf">0.5</span><span class="p">)</span>
    <span class="c1"># Filter...
</span>    <span class="n">primes</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">primes</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="n">p</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
    <span class="c1"># Now we need to find powers...
</span>    <span class="n">prod</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">primes</span><span class="p">:</span>
        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">n</span> <span class="o">%</span> <span class="n">p</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">n</span> <span class="o">//=</span> <span class="n">p</span>
        <span class="c1"># Multiply by one more
</span>        <span class="c1"># than the number of powers
</span>        <span class="n">prod</span> <span class="o">*=</span> <span class="p">(</span><span class="n">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">prod</span>
    
<span class="n">n</span> <span class="o">=</span> <span class="mi">8</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">num</span> <span class="o">=</span> <span class="n">n</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
    <span class="n">f</span> <span class="o">=</span> <span class="n">numOfFactors</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">f</span> <span class="o">&gt;</span> <span class="mi">500</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
        <span class="k">break</span>
    <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<p>Running this now gives,</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>76576500
0.7850484938271605 seconds.
</code></pre></div></div>

<p>Notice that the time is much faster.</p>
:ET