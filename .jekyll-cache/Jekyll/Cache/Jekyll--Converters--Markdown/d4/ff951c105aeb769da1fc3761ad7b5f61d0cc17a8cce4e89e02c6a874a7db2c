I":)<h2 id="question">Question</h2>

<p>The fraction \(\frac{49}{98}\) is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that \(\frac{49}{98} = \frac{4}{8}\), which is correct, is obtained by cancelling the 9s.</p>

<p>We shall consider fractions like, \(\frac{30}{50} = \frac{3}{5}\), to be trivial examples.</p>

<p>There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.</p>

<p>If the product of these four fractions is given in its lowest common terms, find the value of the denominator.</p>

<h2 id="answer">Answer</h2>

<p>This problem is practically begging for us to use a double for loop and look through all fractions. However, there are some enhancements we can make to reduce the number of fractions we look through. Letâ€™s say the numerator of our test fraction is 14. In that case, there is no reason to test the denominator of 56, as there are no numbers to cancel! Therefore, for each numerator, we can generate all cancellable denominators, and then see if the property holds. For example, for 14, if we wanted to cancel the 1, we would test 15, 16, 17, 18, 19, 21, 31, 41, 51, 61, 71, 81, and 91, as these are all the numbers greater than 14 with a 1 in them.</p>

<p>If \(d\) is the digit we want to cancel, then to generate all 2-digit numbers with \(d\) in them, we can take all the numbers between \(10d+1\) and \(10d+9\) inclusive (for \(d\) in the tens place), and the numbers \(d, 10+d,20+d,\dots,90+d\) (for \(d\) in the ones place). Afterwards, we filter out all numbers that are not bigger than our original denominator. Note that the number \(11d\) is generated twice, so we have to remove one instance. Below is the function I use to generate the denominators necessary.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">getSameDigitNums</span><span class="p">(</span><span class="n">initNum</span><span class="p">,</span> <span class="n">digit</span><span class="p">):</span>
    <span class="c1"># Get all tens digit numbers,
</span>    <span class="c1"># excluding multiple of 10
</span>    <span class="n">nums</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">digit</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">digit</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">))</span>
    <span class="c1"># Now append all numbers with ones digit.
</span>    <span class="n">nums</span><span class="p">.</span><span class="n">extend</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">digit</span><span class="p">,</span> <span class="mi">100</span> <span class="o">+</span> <span class="n">digit</span><span class="p">,</span> <span class="mi">10</span><span class="p">)))</span>
    <span class="c1"># Filter out numbers that are less than or equal
</span>    <span class="c1"># to digit and remove the double instance of digit * 11
</span>    <span class="n">nums</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nums</span> <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="n">initNum</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">digit</span> <span class="o">*</span> <span class="mi">11</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
        <span class="n">nums</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">digit</span> <span class="o">*</span> <span class="mi">11</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">nums</span>
</code></pre></div></div>

<p>Okay, now we have that, we can loop through all of our numerators, and for each of the two digits, grab all valid denominators and start testing. Since we want the result in lowest terms, we also need a GCD function for the end.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">gcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="c1">#the euclid algorithm
</span>    <span class="k">while</span> <span class="n">a</span><span class="p">:</span>
        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span> <span class="o">%</span> <span class="n">a</span><span class="p">,</span> <span class="n">a</span>
    <span class="k">return</span> <span class="n">b</span>

<span class="n">numProd</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">denomProd</span> <span class="o">=</span> <span class="mi">1</span>

<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>
    <span class="c1"># Skip if a is a multiple of 10.
</span>    <span class="k">if</span> <span class="n">a</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">keep</span><span class="p">,</span> <span class="n">delete</span> <span class="ow">in</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]:</span>
            <span class="n">aNew</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">a</span><span class="p">)[</span><span class="n">keep</span><span class="p">]</span>
            <span class="n">deletedDigit</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">a</span><span class="p">)[</span><span class="n">delete</span><span class="p">]</span>
            <span class="n">denominators</span> <span class="o">=</span> <span class="n">getSameDigitNums</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">deletedDigit</span><span class="p">))</span>
            <span class="c1"># Now go through each number, remove the digit and see
</span>            <span class="c1"># what happens
</span>            <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">denominators</span><span class="p">:</span>
                <span class="n">b</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
                <span class="c1"># See which digit was cancelled.
</span>                <span class="k">if</span> <span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">deletedDigit</span><span class="p">:</span>
                    <span class="n">bNew</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">bNew</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                <span class="c1"># Now see if the old fraction
</span>                <span class="c1"># is the same as the new fraction
</span>                <span class="k">if</span> <span class="n">a</span> <span class="o">/</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span><span class="p">(</span><span class="n">aNew</span><span class="p">)</span> <span class="o">/</span> <span class="n">bNew</span><span class="p">:</span>
                    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="s">'/'</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
                    <span class="n">numProd</span> <span class="o">*=</span> <span class="n">a</span>
                    <span class="n">denomProd</span> <span class="o">*=</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="c1"># Reduce the multiplied frcation
</span><span class="n">GCD</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="n">numProd</span><span class="p">,</span> <span class="n">denomProd</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'---------'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">numProd</span> <span class="o">//</span> <span class="n">GCD</span><span class="p">,</span> <span class="s">'/'</span><span class="p">,</span> <span class="n">denomProd</span> <span class="o">//</span> <span class="n">GCD</span><span class="p">)</span>
</code></pre></div></div>

<p>Running the above results in an output of,</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>16 / 64
19 / 95
26 / 65
49 / 98
---------
1 / 100
0.0025031140777648326 seconds.
</code></pre></div></div>

<p>Therefore, the four fractions that follow this special property are \(\frac{16}{64},\frac{19}{95},\frac{26}{65}\), and \(\frac{49}{98}\). Multiplying these together  results is \(\frac{1}{100}\) and so the denominator is <strong>100</strong>.</p>
:ET