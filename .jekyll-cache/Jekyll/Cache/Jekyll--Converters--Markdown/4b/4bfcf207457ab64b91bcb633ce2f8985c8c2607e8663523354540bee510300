I"Ù<h2 id="question">Question</h2>

<p>Three distinct points are plotted at random on a Cartesian plane, for which \(-1000\leq x,y\leq 1000\), such that a triangle is formed.</p>

<p>Consider the following two triangles:</p>

<p>[A(-340, 495), B(-153, -910), C(835, -947)
<br />
X(-175, 41), Y(-421, -714), Z(574, -645)]</p>

<p>It can be verified that triangle \(ABC\) contains the origin, whereas triangle \(XYZ\) does not.</p>

<p>Using <a href="https://projecteuler.net/project/resources/p102_triangles.txt">triangles.txt</a> (right click and ‚ÄòSave Link/Target As‚Ä¶‚Äô), a 27K text file containing the coordinates of one thousand ‚Äúrandom‚Äù triangles, find the number of triangles for which the interior contains the origin.</p>

<p>NOTE: The first two examples in the file represent the triangles in the example given above.</p>

<h2 id="answer">Answer</h2>

<p>The core question is: <strong>‚ÄúGiven a triangle, is the origin contained inside of it?‚Äù</strong> Some googling of this problem leads to the structure of <strong>barycentric coordinates</strong>.</p>

<p>The <a href="https://en.wikipedia.org/wiki/Barycentric_coordinate_system">Wikipedia page</a> provides a good overview. Essentially, we can put a <strong>weight</strong> \(\lambda_i\) for each point \(i\) of the triangle. Thus, we‚Äôll have \(\lambda_1, \lambda_2, \lambda_3\). Essentially, each point \((x,y)\) in the Cartesian is a weighted average of the three points of the triangle.</p>

<p>Intuitively, you would think that for a point \((x,y)\), if these weights <strong>are all between 0 and 1</strong>, then \((x,y)\) would be inside the triangle. And you would be right! Conversely, if <em>any</em> of these weights are greater than 1 or negative, then the point lies outside the triangle.</p>

<p>How do we compute the weights though? The <a href="https://en.wikipedia.org/wiki/Barycentric_coordinate_system#Conversion_between_barycentric_and_Cartesian_coordinates">conversion section</a> gives a quick formula for calculating two of the weights; since the weights have to sum to 1, the third can be calculated easily once you know two of them.</p>

<p>If our triangle points are \(\mathbf{r_1}=\langle x_1,y_1\rangle, \mathbf{r_2}=\langle x_2,y_2\rangle, \mathbf{r_3}=\langle x_3, y_3\rangle\), the point we are testing is \(\mathbf{r}=\langle x, y\rangle\), then we can create a 2 by 2 matrix</p>

<p>[\mathbf{T}=\begin{bmatrix}
	x_1-x_3 &amp; x_2-x_3 <br />
	y_1-y_3 &amp; y_2-y_3
\end{bmatrix}]</p>

<p>and then, by taking the inverse, we can find two of the weights:</p>

<p>[\begin{bmatrix}
	\lambda_1 \ \lambda_2
\end{bmatrix} = \mathbf{T}^{-1}(\mathbf{r}-\mathbf{r_3})]</p>

<p>The last weight is \(\lambda_3 = 1-\lambda_1-\lambda_2\). With the help of the <code class="highlighter-rouge">numpy</code> package, doing vector-matrix multiplications are a cinch. Of course, in our case, the test point is \(\mathbf{r}=\langle 0, 0\rangle\), so we end up just multiplying by the negative of \(\mathbf{r_3}\).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'p102_triangles.txt'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">triangles</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">reshape</span><span class="p">([</span><span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">','</span><span class="p">)</span>
                            <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">splitlines</span><span class="p">()],</span>
                           <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">)).</span><span class="n">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>

<span class="n">numOfTriangles</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
<span class="k">for</span> <span class="n">triangle</span> <span class="ow">in</span> <span class="n">triangles</span><span class="p">:</span>
    <span class="n">r1</span> <span class="o">=</span> <span class="n">triangle</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">r2</span> <span class="o">=</span> <span class="n">triangle</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">r3</span> <span class="o">=</span> <span class="n">triangle</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
    <span class="n">T</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="n">r1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">r3</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">r2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">r3</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span>
                  <span class="p">[</span><span class="n">r1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">r3</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">r2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">r3</span><span class="p">[</span><span class="mi">1</span><span class="p">]]])</span>
    <span class="n">Lam</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="n">inv</span><span class="p">(</span><span class="n">T</span><span class="p">),</span> <span class="n">r</span> <span class="o">-</span> <span class="n">r3</span><span class="p">)</span>
    <span class="n">l1</span> <span class="o">=</span> <span class="n">Lam</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">l2</span> <span class="o">=</span> <span class="n">Lam</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">l3</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">l1</span> <span class="o">-</span> <span class="n">l2</span>
    <span class="k">if</span> <span class="n">l1</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">l2</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">l3</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">numOfTriangles</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">print</span><span class="p">(</span><span class="n">numOfTriangles</span><span class="p">)</span>
</code></pre></div></div>

<p>Running this short code gets us a number of,</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>228
0.04480099999999998 seconds.
</code></pre></div></div>

<p>Thus, there are <strong>228</strong> triangles that contain the origin.</p>
:ET